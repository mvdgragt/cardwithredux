{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport swedbankImage from \"../images/swedbank.png\";\nexport const getUser = createAsyncThunk(\"wallet/getUser\", async () => {\n  return fetch(\"https://randomuser.me/api/\").then(response => response.json());\n});\nconst walletSlice = createSlice({\n  name: \"wallet\",\n  initialState: {\n    activeCards: [{\n      vendor: \"https://vandergragt.eu/images/mastercard.png\",\n      bank: \"swedbank\",\n      logo: swedbankImage,\n      cardNumber: \"4431441314123416\".match(/.{1,4}/g).join(\" \"),\n      name: \"\",\n      expiryMonth: \"12\",\n      expiryYear: \"24\",\n      cvc: Math.floor(Math.random() * (999 - 100 + 1) + 100)\n    }],\n    inactiveCards: [],\n    cardHolderName: \"\"\n  },\n  reducers: {\n    addCards: (state, action) => {\n      state.inactiveCards = [...state.inactiveCards, action.payload];\n    },\n    handleCards: (state, action) => {\n      const index = state.inactiveCards.map(card => card.cardNumber).indexOf(action.payload.cardNumber);\n      state.inactiveCards.splice(index, 0, state.activeCards[0]);\n      state.activeCards = [action.payload];\n      state.inactiveCards = state.inactiveCards.filter(card => card.cardNumber !== action.payload.cardNumber);\n    },\n    removeCard: (state, action) => {\n      state.inactiveCards = state.inactiveCards.filter(card => card.cardNumber !== action.payload.cardNumber);\n    }\n  },\n  extraReducers: {\n    [getUser.pending]: (state, action) => {\n      console.log(\"Fetching data\");\n    },\n    [getUser.fulfilled]: (state, action) => {\n      state.activeCards[0].name = action.payload.results[0].name.first.toUpperCase() + \" \" + action.payload.results[0].name.last.toUpperCase();\n      state.cardHolderName = action.payload.results[0].name.first.toUpperCase() + \" \" + action.payload.results[0].name.last.toUpperCase();\n    },\n    [getUser.rejected]: (state, action) => {\n      console.log(\"Failed to fetch data\");\n    }\n  }\n});\nexport default walletSlice.reducer;\nexport const {\n  addCards,\n  handleCards,\n  removeCard\n} = walletSlice.actions;","map":{"version":3,"sources":["/Users/mvdgragt/EC/cards/projektarbete/src/redux/walletSlice.js"],"names":["createSlice","createAsyncThunk","swedbankImage","getUser","fetch","then","response","json","walletSlice","name","initialState","activeCards","vendor","bank","logo","cardNumber","match","join","expiryMonth","expiryYear","cvc","Math","floor","random","inactiveCards","cardHolderName","reducers","addCards","state","action","payload","handleCards","index","map","card","indexOf","splice","filter","removeCard","extraReducers","pending","console","log","fulfilled","results","first","toUpperCase","last","rejected","reducer","actions"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport swedbankImage from \"../images/swedbank.png\";\n\nexport const getUser = createAsyncThunk(\"wallet/getUser\", async () => {\n  return fetch(\"https://randomuser.me/api/\").then((response) =>\n    response.json()\n  );\n});\n\nconst walletSlice = createSlice({\n  name: \"wallet\",\n  initialState: {\n    activeCards: [\n      {\n        vendor: \"https://vandergragt.eu/images/mastercard.png\",\n        bank: \"swedbank\",\n        logo: swedbankImage,\n        cardNumber: \"4431441314123416\".match(/.{1,4}/g).join(\" \"),\n        name: \"\",\n        expiryMonth: \"12\",\n        expiryYear: \"24\",\n        cvc: Math.floor(Math.random() * (999 - 100 + 1) + 100),\n      },\n    ],\n    inactiveCards: [],\n    cardHolderName: \"\",\n  },\n  reducers: {\n    addCards: (state, action) => {\n      state.inactiveCards = [...state.inactiveCards, action.payload];\n    },\n    handleCards: (state, action) => {\n      const index = state.inactiveCards\n        .map((card) => card.cardNumber)\n        .indexOf(action.payload.cardNumber);\n\n      state.inactiveCards.splice(index, 0, state.activeCards[0]);\n\n      state.activeCards = [action.payload];\n\n      state.inactiveCards = state.inactiveCards.filter(\n        (card) => card.cardNumber !== action.payload.cardNumber\n      );\n    },\n    removeCard: (state, action) => {\n      state.inactiveCards = state.inactiveCards.filter(\n        (card) => card.cardNumber !== action.payload.cardNumber\n      );\n    },\n  },\n  extraReducers: {\n    [getUser.pending]: (state, action) => {\n      console.log(\"Fetching data\");\n    },\n    [getUser.fulfilled]: (state, action) => {\n      state.activeCards[0].name =\n        action.payload.results[0].name.first.toUpperCase() +\n        \" \" +\n        action.payload.results[0].name.last.toUpperCase();\n      state.cardHolderName =\n        action.payload.results[0].name.first.toUpperCase() +\n        \" \" +\n        action.payload.results[0].name.last.toUpperCase();\n    },\n    [getUser.rejected]: (state, action) => {\n      console.log(\"Failed to fetch data\");\n    },\n  },\n});\nexport default walletSlice.reducer;\nexport const { addCards, handleCards, removeCard } = walletSlice.actions;\n"]},"metadata":{},"sourceType":"module"}